/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.2.14 models/project-prep.glb 
*/

import React, { useEffect, useRef, useState } from "react";
import { Decal, Float, useGLTF, useHelper, useScroll } from "@react-three/drei";
import { useFrame, useLoader } from "@react-three/fiber";
import { DoubleSide, PointLightHelper, TextureLoader } from "three";
import gsap from "gsap";

import * as THREE from "three";

export function Blog(props) {
  const [map] = useLoader(TextureLoader, ["/react.jpg"]);
  const { nodes, materials } = useGLTF("models/Blog.glb");

  // const ref = useRef();
  const data = useScroll();

  const Light = () => {
    const ref = useRef();
    // useHelper(ref, PointLightHelper, 1);

    return (
      <rectAreaLight
        width={5}
        height={5}
        ref={ref}
        // castShadow
        position={[3, 4.2, 0]}
        intensity={3}
        rotation={[0, 1.3, 0]}
      />
    );
  };

  const [hovered, setHovered] = useState(false);

  useEffect(() => {
    document.body.style.cursor = hovered ? "pointer" : "auto";
  }, [hovered]);

  return (
    <group
      {...props}
      dispose={null}
      ref={props.innerRef}
      onPointerOver={() => setHovered(true)}
      onPointerOut={() => setHovered(false)}
    >
      <Float
        speed={5} 
        rotationIntensity={0.1} 
        floatIntensity={0.2} 
        floatingRange={[0.1, 1]} 
      >
        {hovered ? <Light /> : null}
        <mesh
          geometry={nodes.Cube.geometry}
          material={materials.Material}
          position={[0, 4.2, 0]}
          scale={[0.25, 2.5, 3]}
        >
          <Decal
            position={[1.15, 0, 0.1]}
            rotation={[0, 1, 0]}
            scale={[1.6, 1.87, 1.6]}
          >
            <meshStandardMaterial
              side={DoubleSide}
              map={map}
              polygonOffset
              polygonOffsetFactor={-1}
            />
          </Decal>
        </mesh>
      </Float>
    </group>
  );
}

useGLTF.preload("models/blog.glb");
